{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello there! Seems like you are in need of finding your way through the magical world of IoT Internet of Things.  Well, look no further, as this documentation will provide you with all the necessary information you need to navigate through the CIT course.</p> <p>Note</p> <p>This documentation is designed for MSc Construction Information Technology Engineering students to learn the integration of IoT in Civil Engineering, with a focus on Arduino and microcontroller programming.</p>"},{"location":"#course-overview","title":"Course Overview","text":"<ul> <li>Understand the basics of IoT and microcontrollers</li> <li>Learn programming fundamentals for Arduino</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"Section Description Link Instruction What is Arduino, microcontrollers, and their history Introduction Getting Started Setting up Arduino IDE and connecting hardware Getting Started Programming Basics Structure, setup/loop, variables, operators, control flow Programming Basics Input/Output Operations Digital and analog I/O, pin configuration I/O Operations Essential Functions Essential built-in functions for Arduino Essential Functions Useful Links Useful links with valuable information regarding Arduino and IoT in general Useful Links References Literature used to make this project References"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Start with Introduction to learn the basics.</li> <li>Move to Getting Started for setup instructions.</li> <li>Dive into Programming Basics to begin coding.</li> <li>Explore I/O Operations for hardware interaction.</li> <li>Reference Essential Functions for useful code snippets.</li> <li>Check Useful Links to dive deeper in knowledge.</li> <li>Check References to check the literature used for this project.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#anatomy-of-an-arduino-board","title":"Anatomy of an Arduino Board","text":"<p>Although Arduino boards come in various models, most share several essential components. Here\u2019s a breakdown of the main parts you\u2019ll typically find:</p> <p></p> <p>Arduino Board Anatomy - Public Domain(Link to image)</p> <ol> <li>Microcontroller \u2013 Acts as the central processor, running the code you upload. It\u2019s like a compact computer dedicated to specific tasks.</li> <li>USB Port \u2013 Allows you to connect the Arduino to your computer.</li> <li>USB to Serial Converter \u2013 Facilitates communication between your computer and the microcontroller, enabling you to upload programs.</li> <li>Digital Pins \u2013 Used for digital signals (either HIGH/LOW or 1/0), suitable for controlling devices like LEDs or reading switches.</li> <li>Analog Pins \u2013 Capable of reading analog inputs with a 10-bit resolution (values from 0 to 1023).</li> <li>5V / 3.3V Pins \u2013 Provide power to external modules or sensors.</li> <li>GND (Ground) \u2013 Serves as the reference point for the circuit, completing the electrical path at zero volts.</li> <li>VIN (Voltage In) \u2013 Used to supply power to the board from an external source.</li> </ol> <p>While different Arduino models may include additional features, these components are commonly present on most boards.</p>"},{"location":"getting-started/#arduino-ide","title":"Arduino IDE","text":"<p>The Arduino IDE (Integrated Development Environment) is the official software for writing and uploading code to Arduino boards.</p>"},{"location":"getting-started/#features","title":"Features","text":"<ul> <li>Simple text editor for writing code.</li> <li>Built-in serial monitor for communication.</li> <li>Easy upload of sketches to the board.</li> </ul> <p>Note</p> <p>The IDE supports multiple boards and libraries.</p>"},{"location":"getting-started/#installing-the-ide","title":"Installing the IDE","text":"<p>Download the Arduino IDE from the official website and follow the installation instructions for your operating system.</p>"},{"location":"getting-started/#writing-and-uploading-code","title":"Writing and Uploading Code","text":"<p>Write your code in the editor and click the Upload button to send it to your Arduino board.</p> <p>Note</p> <p>Make sure the correct board and port are selected before uploading.</p>"},{"location":"getting-started/#connecting-arduino","title":"Connecting Arduino","text":"<p>To connect your Arduino board to your computer, use a USB cable. The USB connection provides both power and data transfer.</p> <ul> <li>Make sure your board is properly seated and the cable is securely connected.</li> <li>The Arduino IDE will automatically detect the board if drivers are installed.</li> </ul> <p>Note</p> <p>If your board is not detected, check the cable and try a different USB port.</p> <p>Once connected, you can upload sketches (programs) to the board using the Arduino IDE.</p>"},{"location":"getting-started/#selecting-the-board-and-port","title":"Selecting the Board and Port","text":"<p>In the Arduino IDE, go to Tools &gt; Board and select your Arduino model (e.g., Arduino Uno). Then go to Tools &gt; Port and select the correct COM port.</p> <p>Note</p> <p>The COM port may change if you unplug and replug the board.</p>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ul> <li>Ensure drivers are installed.</li> <li>Try restarting the IDE.</li> <li>Use a different USB cable or port.</li> </ul>"},{"location":"introduction/","title":"Introduction to IoT and Arduino","text":""},{"location":"introduction/#what-is-arduino","title":"What is \"Arduino\"?","text":"<p>Arduino is an open-source electronics platform designed for ease of use, combining simple hardware and software. Arduino boards can receive inputs, such as signals from sensors, button presses, or online messages, and respond by controlling outputs like motors, LEDs, or publishing data online. You program the board by sending instructions to its microcontroller using the Arduino programming language (derived from Wiring) and the Arduino Software (IDE), which is built on top of Processing.</p> <p>Arduino has powered countless projects, ranging from everyday gadgets to advanced scientific tools. Its global community includes students, hobbyists, artists, programmers, and professionals, all contributing to a vast pool of shared knowledge that benefits both beginners and experts.</p> <p>Originally developed at the Ivrea Interaction Design Institute, Arduino was intended as a quick prototyping tool for students without technical backgrounds. As its popularity grew, the platform evolved to meet new demands, expanding from basic boards to products for IoT, wearables, 3D printing, and embedded systems.</p> More on the history of Arduino <p>In 2001, Casey Reas and Benjamin Fry launched a project called Processing. The aim of this project was to encourage non-programmers to write programs quickly and easily. The project allows the user to test their ideas and experiment on digital sketchbooks.  This project gave rise to new ideas for conducting experiments in the physical world. In 2003, Hernando Barrag\u00e1n began working on a microcontroller called Wiring, which has the same principle of operation as Processing. This board played a major role in the creation of the Arduino.</p> <p>In partnership with the Processing project, the Wiring project also aimed to attract artists, designers and other creative people. However, unlike the Processing project, Wiring involved more electronics than programming. Although the wiring board was cheaper than some other microcontrollers (PIC, etc.), it was a high-cost investment for students.</p> <p>In 2005, the Arduino project was launched as a more affordable and easy-to-use device for students at the institute. The creators are said to have named the project in honor of King Arduin of Italy. According to some, this name is associated with the name of the brewery near the institute.</p> <p>The Arduino project uses a lot of experience from both Wiring and Processing projects. For example, a graphical user interface (GUI) similar to that in the Processing project is used in Arduino. Although the interface is from the Processing project, it has been customized for the Arduino.</p> <p>Arduino also uses the Processing project's approach when naming coded projects, calling them sketches. In this program you will be informed about many sketches and you will be able to check them.</p> <p>The Arduino board was more 'compassionate' and powerful than the Wiring and previous microcontrollers. Students and even professionals could easily damage Wiring and other microcontrollers due to incorrect wiring. This problem was not only financial, but also caused delays in projects.</p> <p>It is also possible to replace the microcontroller chip on the Arduino board, so that if it becomes unusable, you can simply replace the chip instead of the full board. Another important difference is that Arduino boards are cheaper and more profitable than others, and in 2006 the Basic Stamp board was sold twice as expensive as the Arduino board.</p>"},{"location":"introduction/#why-choose-arduino","title":"Why Choose Arduino?","text":"<p>Arduino\u2019s straightforward and accessible design has made it popular for a wide range of projects. The software is beginner-friendly but also offers flexibility for advanced users, and it works on Mac, Windows, and Linux. Educators and students use Arduino for affordable scientific instruments, demonstrations of scientific principles, and learning programming and robotics. Designers, architects, musicians, and artists use it for interactive prototypes and creative installations. Makers use Arduino for projects showcased at events like Maker Faire. Arduino is a valuable tool for learning and experimentation, with resources and community support available for everyone.</p>"},{"location":"introduction/#about-microcontrollers","title":"About Microcontrollers","text":"<p>At the heart of the Arduino lies a microcontroller that has the ability to perform logical operations at speeds and accuracy that humans cannot.</p> <p>You can even create systems that are in close contact with the real world. For example, it is possible to create smart home, greenhouse and even garden systems, which can minimize human labor and impact and perform almost all the work in a timely and accurate manner.</p> <p>Microcontrollers are small and do not take up much space and do not require much power for operation. Well, how small? Physically, the microcontrollers that come with the Arduino are in captured form.</p> <p>The microcontroller is rectangular in shape, mounted on a blue PCB. However, this does not mean that all microcontrollers are of this size, they can be in small-microscopic forms, ranging in size and function.</p> <p>In addition to the main processor core, which you specify, there is RAM (Random Access Memory) on the chip to store commands during program execution. It also has input and output devices that can communicate with the environment or other computers.</p> <p>Microcontrollers were invented in the early 1970s to perform a variety of automation tasks in the industry. The current Arduino board includes an ATmega328 microprocessor from Atmel, a family of AVR chips. These microprocessors were first created in the early 1990s.</p> <p>One of the advantages of microcontrollers is that they are cheaper than microprocessors for phones, computers and other devices. This is because of their limited abilities.</p> <p>Because they are designed to either control something or react to signals received from sensors.</p> <p>Because they are cheap, you can use them in all kinds of small computational tasks, e.g. garage door, etc. you can automate devices with code.</p> <p>The microcontroller placed on the Arduino board is very cheap, and the reason why the board is more valuable is the other important devices placed on it, which help you to facilitate your work.</p>"},{"location":"io-operations/","title":"Input/Output Operations","text":""},{"location":"io-operations/#digital-io","title":"Digital I/O","text":""},{"location":"io-operations/#pinmodepin-mode","title":"pinMode(pin,  mode),","text":"<p>Used in <code>void setup()</code> to configure a specified pin to behave either as an INPUT or an OUTPUT.</p> <pre><code>pinMode(pin, OUTPUT);  //sets pin as OUTPUT\n</code></pre> <p>Arduino digital pins default to inputs, so they don't need to be explicitly declared as inputs with <code>pinMode()</code>. Pins configured as <code>INPUT</code> are said to be in high-impedance state.  </p> <p>There are also convenient 20k pullup resistors built into the Atmega chip can be accessed from software. These built-in pullup resistors are accesed in the following manner: </p> <pre><code>pinMode(pin, INPUT);  \ndigitalWrite(pin, HIGH); \n</code></pre> <p>Pins configured as <code>OUTPUT</code> are said to be in a low-impedance state and can provide 40mA (milliamps) of current to other devices. This is enough current to brightly light up an LED, but not enough current to run most relays, solenids, or motors. </p> <p>Short circuits on Arduino pins and excessive current can damage or destroy the output pin, or damage the entire Atmega chip. It is often a good idea to connect an <code>OUTPUT</code> pin to an external device in series with a 470 or 1k ohms resistors.</p>"},{"location":"io-operations/#digitalreadpin","title":"digitalRead(pin)","text":"<p>Reads the value from a specified digital pin with the result either <code>HIGH</code> or <code>LOW</code>. The pin can be specified as either a variable or constant (0-13). </p> <pre><code>    value = digitalRead(pin); \n</code></pre>"},{"location":"io-operations/#digitalwritepin-value","title":"digitalWrite(pin, value)","text":"<p>Outputs either logic level <code>HIGH</code> or <code>LOW</code> at a specified digital pin. The pin can be specified as either a variable or constant (0-13). </p> <p><pre><code>digitalWrite(pin, HIGH); \n</code></pre> The following example reads a pushbutton connected to a digitak input and turns on a LED connected to a digital output when the button has been pressed: </p> <pre><code>int led = 13;     //LED on pin 13\nint pushButton  = 7;  //pushbutton on pin 7\nint value = 0;    //variablle to read value\n\nvoid setup()\n{\n    pinMode(led, OUTPUT); \n    pinMode(pushButton, INPUT);   \n}\n\nvoid loop()\n{\n    value = digitalRead(pushButton);  \n    digitalWrite(led, value);         \n}\n</code></pre>"},{"location":"io-operations/#analog-io","title":"Analog I/O","text":""},{"location":"io-operations/#analogreadpin","title":"analogRead(pin)","text":"<p>Reads the value from a specified analog pin with a 10-bit resolution. This pin only works on analog in pins (0-5). The result varies from 0 to 1023. </p> <pre><code>value = analogRead(pin); \n</code></pre> <p>Note</p> <p>Analog pins do not require to be first declared as <code>INPUT</code> nor <code>OUTPUT</code>.</p>"},{"location":"io-operations/#analogwritepin-value","title":"analogWrite(pin, value)","text":"<p>Writes a pseudo-analog value using hardware enabled pulse width modulation (PWM) to an output pin marked PWM. On newer Arduinos with the ATmega168 chip, this function works on pins 3, 5, 6, 9, 10 and 11. Older Arduinos only supports 9, 10 and 11. The value can be specified as a variable or constant with a value from 0-255. </p> <pre><code>analogWrite(pin, value);  \n</code></pre> <p>A value of 0 generates a steady 0 volts output at the specified pin. A value of 255 generates a steady 5 volts output at the specified pin. For values in between 0-255, the pin rapidly alternates between 0 and 5 volts. </p> <p>Because this is a hardware function, the pin will generate a steady wave after a call to analogWrite in the background until the next call to analogWrite (or a call to digitalRead or digitalWrite on the same pin).</p> <pre><code>int led = 10; //LED with 220 resist. on pin 10\nint pin = 0;  //potentiometer on analog pin 0\nint value;    //value for reading\n\nvoid setup(){} \n\nvoid loop()\n{\n    value = analogRead(pin); \n    value /= 4;   //converts 0-1023 to 0-255\n    analogWrite(led, value); \n}\n</code></pre>"},{"location":"necessary-functions/","title":"Some necessary functions","text":""},{"location":"necessary-functions/#delaymilliseconds","title":"delay(milliseconds)","text":"<p>Pauses your program for the amount of time as specified in milliseconds, where 1000 equals 1 second. </p> <pre><code>delay(1000);      //waits for one second\n</code></pre>"},{"location":"necessary-functions/#millis","title":"millis()","text":"<p>Returns the number of milliseconds since the Arduino board began running the current program as an unsigned long value. </p> <pre><code>value = millis(); //sets value equal to millis() \n</code></pre> <p>Note</p> <p>This number will overflow (reset back to zero), after approximately 9 hours.</p>"},{"location":"necessary-functions/#minx-y","title":"min(x, y)","text":"<p>Calculates the minimum of two numbers of any data type and returns the smaller number.  <pre><code>value = min(value, 100);\n</code></pre></p>"},{"location":"necessary-functions/#maxx-y","title":"max(x, y)","text":"<p>Calculates the maximum of two numbers of any data type and returns the larger number. </p> <pre><code>value = max(value, 100);\n</code></pre>"},{"location":"necessary-functions/#randomseedseed","title":"randomSeed(seed)","text":"<p>Sets a value, or seed, as the starting point for the <code>random()</code> function.</p> <p><pre><code>randomSeed(value);\n</code></pre> Because the Arduino is unable to create a truly random number, randomSeeed allows you to place a variable, constant, or other function into the random function, which helps to generate more random \"random\" numbers. There are a variety of different seeds, or functions, that can be used in this function includong millis() or even <code>analogRead()</code> to read electrical noise through an analog pin. </p>"},{"location":"necessary-functions/#randommax-or-randommin-max","title":"random(max) or random(min, max)","text":"<p>The random function allows you to return pseudo-random numbers within a range specified by min and max values. </p> <pre><code>value = random(100, 200);\n</code></pre> <p>Note</p> <p>Use this after using the <code>randomSeed()</code> function.</p> <p>The following example creates a random value between 0-255 and outputs a PWM signal on a PWM pin equal to random value: </p> <pre><code>int ranNumber;  //variable to store the random value\nint led = 10;   //LED with 220 resistor on pin 10\n\nvoid setup() {}   //no setup needed\n\nvoid loop()\n{\n    randomSeed(millis());  //sets millis() as the seed\n    randNumber = random(255);  //random number from 0-255\n    analogWrite(led, randNumber); //outputs PWM signal\n    delay(500);                   //pauses for half a second\n}\n</code></pre>"},{"location":"necessary-functions/#serialbeginrate","title":"Serial.begin(rate)","text":"<p>Opens serial port and sets the baud rate for serial data transmission. The typical baud rate for comminucating with the computer is 9600 although other speeds are supported. </p> <pre><code>void setup()\n{\n    Serial.begin(9600); //opens serial port sets data rate to 9600\n}\n</code></pre> <p>Note</p> <p>When using serial communication, digital pins 0 (RX) and 1 (TX) cannot be used at the same time.</p>"},{"location":"necessary-functions/#serialprintlndata","title":"Serial.println(data)","text":"<p>Prints data to the serial port, followed by an automatic carriage return and line feed. This command takes the same form as <code>Serial.print()</code>, but is easier for reading data on the Serial Monitor. </p> <pre><code>Serial.println(analogValue); //prints the value of analogValue\n</code></pre> <p>Note</p> <p>For more information on the various permutations of the Serial.println() and Serial.print() functions please refer to the Arduino website.</p> <p>The following simple example takes a reading from analog pin 0 and sends this data to the computer every 1 second. </p> <pre><code>void setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    Serial.println(analogRead(0)); \n    delay(1000);                   \n}\n</code></pre>"},{"location":"programming-basics/","title":"Programming Basics","text":""},{"location":"programming-basics/#structure","title":"Structure","text":"<p>The basic structure of the Arduino programming language is very simple and consists of at least two parts. These two parts are the functions required for the program to work. And functions consist of various commands.</p> basic_arduino_sketch.ino<pre><code> void setup()\n{\n    //This runs once;\n}\n\nvoid loop()\n{\n    //This runs until interrupted;\n}\n</code></pre> <p>Here <code>setup()</code> is a program preparation, and <code>loop()</code> is a function that executes commands. Both functions must be specified when writing the program.</p> <p>At the beginning of the program, the variables to be used must be specified within the <code>setup()</code> function. The setup function is the initial function of the program and is called only once during the execution of the program and can be used either for the <code>pinMode()</code> (more information on the following topics) or to create a serial connection between the Arduino board and the computer.</p> <p>The loop function is called after the setup and constantly reads commands - input data, output signal, etc. executes. From this we can say that the loop function is the basis of all Arduino programs, and most of the executed program falls on it.</p>"},{"location":"programming-basics/#setup","title":"setup()","text":"<p>The <code>setup()</code> function is called only once during program execution, and can be used to assign pins on a board or to establish a serial connection. Even if there is no executable code block, the program must write the <code>setup()</code> function. </p> <pre><code>void setup()\n{\n    pinMode(pin, OUTPUT); //sets pin as OUTPUT\n}\n</code></pre>"},{"location":"programming-basics/#loop","title":"loop()","text":"<p>After the <code>setup()</code> function is called, the <code>loop()</code> function, as the name implies, loops sequentually to control the Arduino board, respond to external signals, etc. In short, the loop function is the basis of the Arduino program.</p> <pre><code>void loop()\n{\n    digitalWrite(pin, HIGH); //turns pin on\n    delay(1000);             //pauses for 1 sec.\n    digitalWrite(pin, LOW);  //turns pin off\n    delay(1000);             //pauses for 1 sec.\n}\n</code></pre>"},{"location":"programming-basics/#functions","title":"Functions","text":"<p>A function is a block of code with its own name and commands inside. These commands are executed when the function is called. There is enough information about the <code>setup()</code> and <code>loop()</code> functions, and we will talk about other pre-written functions in the following topics. </p> <p>You can create functions yourself to solve any problem you want and eliminate confusion that may arise in the program. To do this, you must first determine the type of function. The output results of the functions correspond to the defined types, e.g. The result of a function of type integer will also be an integer. If no output is expected from the function, then the type of such function should be written as void.</p> <pre><code>type functionName(parameters)\n{\n    commands;\n}\n</code></pre> <p>The <code>delayVal()</code> function of the integer type shown below is designed to pause a program using a value read from a potentiometer. Initially, it defines the variable \"v\" within the function, equates the value of that variable to a value between 0-255 read from the potentiometer, and finally returns the value of the variable v as a result. </p> <pre><code>int delayVal()\n{\n    int v;               //temporary v variable\n    v = analogRead(pot); //read pot. value\n    v /= 4;              //converse 0-1023 to 0-255\n    return v;            //return final value\n}\n</code></pre>"},{"location":"programming-basics/#curly-braces","title":"{}Curly braces","text":"<p>Curly brackets define the beginning and end of function and condition blocks. </p> <pre><code>type function()\n{\n    commands;\n}\n</code></pre> <p>The open curly bracket must be closed. If left unchecked, this can lead to compilation errors that are difficult to find in the program. The best way to prevent this is to close the bracket as soon as you open it and write down the commands inside. </p> <p>There is a convenient way to check this balance in an Arduino environment. Just select the open bracket, and the other half of it will be highlighted.</p>"},{"location":"programming-basics/#semicolon","title":";Semicolon","text":"<p>A semicolon is used to terminate any command, or to separate elements of a program. It is also used to separate commands in parentheses during <code>for</code> loop in which it's mandatory. </p> <pre><code>int x = 13; //x is equal to 13\n</code></pre> <p>Note</p> <p>If a semicolon is not placed in the required place on any line, a compilation error may occur again, so it is better to put it on the place where the semicolon should be placed before writing the command. </p>"},{"location":"programming-basics/#comments","title":"/.../Comments","text":"<p>A comment block is a field of text used to provide general information about a program or any operation to users. The program does not read the comment block and does not execute any line. These blocks start with <code>/*</code> and end with <code>*/</code>.</p> <pre><code>/* Do not forget\n    to close the comment block!\n*/\n</code></pre>"},{"location":"programming-basics/#line-comments","title":"//Line comments","text":"<p>Single line comments start with <code>//</code> and convert the written line into a comment. Like the comment block, it is not read, executed, or stored by the program.</p> <pre><code>//an example for single line comments\n</code></pre> <p>Single line comments are used to write information about a written command or to explain an operation.</p>"},{"location":"programming-basics/#variables","title":"Variables","text":"<p>A variable is a way of naming and storing a numerical value for later use by the program. As their name suggests, variables are numbers that can be continually changed as opposed to constant whose value never changes. A variable needs to be declared and optionally assigned to the value needing to be stored. The following code declares a variable called <code>inputVariable</code> and then assigns it the value obtained on analog input pin 2: </p> <pre><code>int inputVariable = 0;\ninputVariable = analogRead(2);\n</code></pre> <p>\"inputvariable\" is the variable itself. The first line declares that it will contain an <code>int</code>, short integer. The second line sets the variable to the value at analog pin 2. This makes the value of pin 2 accessible elsewhere in the code. </p> <p>Once a variable has been assigned, or re-assigned, you can test its value to see if it meets certain conditions, or you can use its value directly. As an example to illustrate three useful operations with variables, the following code tests whether the <code>inputVariable</code> is less than 100, if true it assigns the value 100 to <code>inputVariable</code>, and then sets a delay based on <code>inputVariable</code> which is now a minimum of 100: </p> <pre><code>if (inputVariable &lt; 100)\n{\n    inputVariable = 100;\n}\ndelay(inputVariable);    \n</code></pre> <p>Note</p> <p>Variables should be given descriptive names, to make the code more readable. Variable names like tiltSensor or pushButton help the programmer and anyone else reading the code to understand what the variable represents.</p>"},{"location":"programming-basics/#declaring-variables","title":"Declaring variables","text":"<p>All variables have to be declared before they can be used. Declaring a variable means defining its value type, as <code>int</code>, <code>float</code>, <code>long</code>, etc., setting a specified name, and optionally assigning an initial value. This only needs to be done once in a program but the value can be changed at any time using arithmetic and various assignments. </p> <p>The following example declares that <code>int</code> or integer type, and that its initial value equals zero. This is called a simple assignment. </p> <pre><code>int inputVariable = 0;\n</code></pre> <p>A variable can be decared in a number of locations throughout the program and where this definition takes place determines what parts of the program can use the variable. </p>"},{"location":"programming-basics/#variable-scope","title":"Variable scope","text":"<p>A variable can be declared at the beginning of the program before <code>setup()</code>, locally inside of functions, and sometimes within a statement block such as for loops. Where the variabe is declared determines the variable scope, or the ability of certain parts of a program to make use of the variable. </p> <p>A global variable is one that can be seen and used by every function and statement in a program. This variable is declared at the beginning of the program, before the <code>setup()</code> function. </p> <p>A local variable is one that is defined inside a function or as part of a for loop. I is only visible and can only be used inside the function in which it was declared. It is therefore possible to have two or more variables of the same name in different parts of the same program that contain different values. Ensuring that only one function has access to its variables simplifies the program and reduces the potential for programming errors. </p> <p>The following example shows how to declare a few different types of variables and demonstrates each variable's visibility: </p> <pre><code>int value;                //A global variable\nvoid setup()\n{\n// no setup needed\n}\n\nvoid loop()\n{\n    for (int localVarForLoop = 0; localVarForLoop&lt;20;) \n    {\n        localVarForLoop++;\n    }\n    float localVarVoidLoop;\n}\n</code></pre>"},{"location":"programming-basics/#datatypes","title":"Datatypes","text":""},{"location":"programming-basics/#byte","title":"byte","text":"<p><code>byte</code> stores 8-bit numerical value without decimal points. They have a range of 0 to 255.</p> <pre><code>byte someVariable = 180;\n</code></pre>"},{"location":"programming-basics/#int","title":"int","text":"<p>Integer shortly <code>int</code>, is the primary datatype for storage of numbers without decimal points and store a 16-bit value with range of 32,767 to -32,768.</p> <pre><code>int someVariable = 1500;\n</code></pre>"},{"location":"programming-basics/#long","title":"long","text":"<p>Extended size datatype for long integers, without decimal points, stored in a 32-bit value with range of 2,147,483,647 to -2,147,483,648.</p> <pre><code>long someVariable = 90000; \n</code></pre>"},{"location":"programming-basics/#float","title":"float","text":"<p>A datatype for floating-point numbers, or numbers that have a decimal point. Floating-point numbers have greater resolution than integers and are stored as a 32-bit value with a range of  3.402823E+38 to -3.4028235E+38.</p> <pre><code>float someVariable = 3.14 \n</code></pre> <p>Note</p> <p>Floating-point numbers are not exact, and may yield strange results when compared. Floating point math is also much slower than integer math in performing calculations, so should be avoided if possible.</p>"},{"location":"programming-basics/#arrays","title":"Arrays","text":"<p>An array is a collection of values that are accessed with an index number. Any value in the array may be called upon by calling the name of the array and the index number of the value. Arrays are zero indexeeed, with the first value in the array beginning at index number 0. An array needs to be declared and optionally assigned values before they can be used. </p> <pre><code>int myArray[] = {element0, element1...};\n</code></pre> <p>Likewise it is possible to declare an array by declaring the array type and size and later assign values to an index position: </p> <p><pre><code>int myArray[5];\nmyArray[3] = 10; \n</code></pre> To retrieve a value from an array, assign a variable to the array and index position: </p> <p><pre><code>x = myArray[3];  //x now equals 10\n</code></pre> Arrays are often used in <code>setup()</code> loops, where the increment counter is also used as the index position for each array value. The following example uses an array to flicker an LED. Using a  <code>setup()</code> loop, the counter begins at 0, writes the value contained at index position 0 in the array <code>flicker[]</code>, in this case 180, to the PWM pin 10, pauses for 200ms, then moves to the next index position. </p> <pre><code>int ledPin = 10;\nbyte flicker[] = {180, 30, 255, 10, 90, 150, 60};\n\nvoid setup()\n{\n    pinMode(ledPin, OUTPUT); \n}\n\nvoid loop()\n{\n    for(int i=0; i&lt;7; i++)\n    {\n        analogWrite(ledPin, flicker[i]);\n        delay(200);\n    }\n}\n</code></pre>"},{"location":"programming-basics/#operators","title":"Operators","text":""},{"location":"programming-basics/#arithmetic","title":"Arithmetic","text":"<p>Arithmetic operators include addition, subtraction, multiplication, and division. They return the sum, difference, product, or quotient (respectively) of two operands. </p> <ul> <li><code>+</code> Addition</li> <li><code>-</code> Subtraction</li> <li><code>*</code> Multiplication</li> <li><code>/</code> Division</li> <li><code>%</code> Modulo</li> </ul> <pre><code>y = y + 3;\nx = x - 7;\ni = j * 6;\nr = r / 5;\n</code></pre> <p>The operation is conducted using the data type of the operands, so, for example, 7/2 results in 3 instead of 3.5 since 7 and 2 are ints and are incapable of using decimal points. This also means that the operation can overflow if the result is larger than what can be stored in the data type.</p> <p>If the operands are of different types, the larger type is used for the calculation. For example, if one of the numbers (operands) are of the type <code>float</code> and the other of type <code>integer</code>, floating point math will be used for the calculation.</p> <p>Note</p> <p>Use the cast operator to convert one variable type to another on the fly. For example, <code>a = (int)3.14</code> will set a equal to 3.</p>"},{"location":"programming-basics/#compound-assignments","title":"Compound assignments","text":"<p>Compound assignments combine an arithmetic operation with a variable assignment. These are commonly found in for loops as described later. The most common compound assignments include: </p> <pre><code>x++     //x = x + 1\nx--     //x = x - 1\nx += y  //x = x + y\nx -= y  //x = x - y\nx *= y  //x = x * y\nx /= y  //x = x / y\n</code></pre>"},{"location":"programming-basics/#comparison-operators","title":"Comparison operators","text":"<p>Comparisons of one variable or constant against another are often used in if statements to test if a specified condition is true. In the example found on the following pages, ?? is used to indicate any of the following conditions: </p> <ul> <li><code>==</code> Equal to</li> <li><code>!=</code> Not equal to</li> <li><code>&lt;</code> Less than</li> <li><code>&gt;</code> Greater than</li> <li><code>&lt;=</code> Less than or equal to</li> <li><code>&gt;=</code> Greater than or equal to</li> </ul> <pre><code>x == y  //x is equal to y\nx != y  //x is not equal to y\nx &lt;  y  //x is less than y\nx &gt;  y  //x is greater than y\nx &lt;= y  //x is less than or equal to y\nx &gt;= y  //x is greater than or equal to y\n</code></pre>"},{"location":"programming-basics/#logical-operators","title":"Logical operators","text":"<p>Logical operators are usually a way to compare two expressions and return a <code>TRUE</code> or <code>FALSE</code> depending on the operator. There are three logical operators, AND, OR and NOT, that are often used in if statements: </p> <ul> <li><code>&amp;&amp;</code> Logical AND</li> <li><code>||</code> Logical OR</li> <li><code>!</code> Logical NOT</li> </ul> <p>Logical AND: </p> <p><pre><code>if (x &gt; 0 &amp;&amp; x &lt; 5)     //true only if both\n                        //expressions are true\n</code></pre> Logical OR:</p> <pre><code>if (x &gt; 0 || x &lt; 5)     //true if either\n                        //expression is true\n</code></pre> <p>Logical NOT:</p> <pre><code>if (!x &gt; 0)             //true only if\n                        //expression is false\n</code></pre> <p>There is a logical truth table listed below, which can be used later: </p> A B A(AND)B A(OR)B NOT A NOT B TRUE TRUE TRUE TRUE FALSE FALSE TRUE FALSE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE FALSE FALSE TRUE TRUE <p>Note</p> <p>Use parentheses to group expressions and clarify order of operations.</p>"},{"location":"programming-basics/#constants","title":"Constants","text":"<p>Constants are fixed values that do not change during program execution.</p>"},{"location":"programming-basics/#defining-constants","title":"Defining Constants","text":"<p>Use the <code>const</code> keyword to define a constant:</p> <pre><code>const int ledPin = 13;\n</code></pre> <p>Note</p> <p>Constants help make your code more readable and prevent accidental changes.</p>"},{"location":"programming-basics/#predefined-constants","title":"Predefined Constants","text":"<p>Arduino provides some predefined constants, such as <code>HIGH</code>, <code>LOW</code>, <code>INPUT</code>, and <code>OUTPUT</code>.</p>"},{"location":"programming-basics/#control-flow","title":"Control flow","text":""},{"location":"programming-basics/#if","title":"if","text":"<p>if statements test whether a certain condition has been reached, such as an analog value being above a certain number, and executes any statements inside the brackets if the statement is true. If false the program skips over the statement. The format for an <code>if</code> test is: </p> <pre><code>if (someVariable ?? value) // ?? can be one of: &lt;, &gt;, &lt;=, &gt;=, ==\n{\n    doSomething; \n}\n</code></pre> <p>The above example compares <code>someVariable</code> to another value, which can be either a variable or constant. If the comparison, or condition in parantheses is true, the statements inside the brackets are run. If not, the program skips over them and continues on after the brackets. </p> <p>Note</p> <p>The <code>??</code> symbol in this example used instead of Operators (Look at Operators section). Beware of accidentally using \"=\" instead of  \"==\" when comparing!</p>"},{"location":"programming-basics/#if-else","title":"if... else","text":"<p><code>if... else</code> allows for 'either-or' decisions to be made. For example, if you wanted to test a digital input, and do one thing if the input went <code>HIGH</code> or instead do another thing if the input was <code>LOW</code>, you would write that this way: </p> <pre><code>if (inputPin == HIGH)\n{\n    doThingA;\n}\nelse\n{\n    doThingB;\n}\n</code></pre> <p><code>else</code> can also precede another if test, so that multiple, mutually exclusive tests can be run at the same time. It is even possible to have an unlimited number of these else branches. Remember though, only one set of statements will be run depending on the condition tests: </p> <pre><code>if (inputPin &lt; 500)\n{\n    doThingA;\n}\nelse if (inputPin &gt;= 1000)\n{\n    doThingB;\n}\nelse\n{\n    doThingC;\n}\n</code></pre>"},{"location":"programming-basics/#for","title":"for","text":"<p>The for statement is used to repeat a block of statements enclosed in curly braces a specified number of times. An increment counter is often used to increment and terminate the loop. There are three parts, seperated by semicolons (;) to the for loop header: </p> <pre><code>for (initialization; condition; expression)\n{\n    doSomething;\n}\n</code></pre> <p>The initialization of a local variable, or increment counter, happens first and only once. Each time through the loop, the following condition is tested. If the condition remains true, the following statements and expression are executed and the condition is tested again. When the condition becomes false, the loop ends. </p> <p>The following example starts the integer <code>i</code> at 0, tests to see if i is still less than 20 and if true, increments i by 1 and executes the enclosed statements: </p> <pre><code>for (int i=0; i&lt;20; i++) \n{                          \n    digitalWrite(13, HIGH);\n    delay(250);            \n    digitalWrite(13, LOW); \n    delay(250);         \n}\n</code></pre>"},{"location":"programming-basics/#while","title":"while","text":"<p><code>while</code> loops will loop continously, and infinitely, until the expression inside the paranthesis becomes false. Something must change the tested variable, or the while loop will never exit. This could be in your code, such as an incremented variable, or an external condition, such as testing a sensor. </p> <pre><code>while (someVariable ?? value)\n{\n    doSomething;\n}\n</code></pre> <p>The following example tests whether <code>someVariable</code> is less than 200 and if true executes the statements inside the brackets and will continue looping until 'someVariable' is no longer less than 200. </p> <pre><code>while (someVariable &lt; 200) \n{\n    doSomething;          \n    someVariable++;\n}\n</code></pre>"},{"location":"programming-basics/#do-while","title":"do... while","text":"<p>The <code>do... while</code> loop works in the same manner as the while loop, with exception that the condition is tested at the end of the loop, so the do loop will always run at least once. </p> <pre><code>do \n{\n    doSomething;\n} while (someVariable ?? value);\n</code></pre> <p>The following example assigns <code>readSensors();</code> to the variable <code>x</code>, pauses for 50 milliseconds, then loops indefinitely until 'x' is no longer less than 100: </p> <pre><code>do\n{\n    x = readSensors();\n    delay(50);         \n} while (x &lt; 100);  \n</code></pre>"},{"location":"references/","title":"References","text":""},{"location":"references/#books-used","title":"Books used","text":"<ul> <li>B. W. Evans, \"Arduino Programming Notebook\", San Francisco, CA, USA, 2007</li> <li>J. Nussey, \"Arduino for Dummies (A Wiley Brand)\", West Sussex, England, 2013</li> </ul>"},{"location":"references/#links-used","title":"Links used","text":"<p>Arduino Documentation</p>"},{"location":"useful-links/","title":"Useful links","text":""},{"location":"useful-links/#all-arduino-related","title":"All Arduino related","text":"Link Description Arduino main page Main page where everything Arduino related can be found Arduino Documentation Main documentation page for Arduino Arduino Documentation: Hardware Documentation page for Arduino hardware Arduino Documentation: Software Documentation page for Arduino Software (IDEs and etc.) Arduino Documentation: Arduino Cloud Documentation page for everything Arduino Cloud related Arduino Documentation: Programming Documentation page for Arduino programming (C++ and MicroPython) Arduino Documentation: Learn Documentation page for basic knowledge about principles and techniques behind Arduino Ecosystem Arduino Documentation: Tutorials Documentation page for Arduino tutorials spanning from beginner to advanced level"}]}